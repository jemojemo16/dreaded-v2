# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - '"main"'

env:
  PROJECT_ID: 'my-project' # TODO: update to your Google Cloud project ID
  GAR_LOCATION: 'us-central1' # TODO: update to your region
  GKE_CLUSTER: 'cluster-1' # TODO: update to your cluster name
  GKE_ZONE: 'us-central1-c' # TODO: update to your cluster zone
  DEPLOYMENT_NAME: 'gke-test' # TODO: update to your deployment name
  REPOSITORY: 'samples' # TODO: update to your Artifact Registry docker repository name
  IMAGE: 'static-site'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update to your workload identity provider

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: eyJub2lzZUtleSI6eyJwcml2YXRlIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiNEt0ajJFbjEyb2I0ajZVWWVTTDI0Qi9jRlh3Qko5dURXMWx3elMzZ0EwWT0ifSwicHVibGljIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiK0dmb1Y2SDUxd1c2LzEzdzlxUEZqWUdZNGhDbEVlWDl3ekR2TjNIZlZTTT0ifX0sInBhaXJpbmdFcGhlbWVyYWxLZXlQYWlyIjp7InByaXZhdGUiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJHRW5XN041RVkwYytUM1FDNWtVWjhreFBDalJSMGROMnJlUHVaZHVkYVZRPSJ9LCJwdWJsaWMiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJEbnZuVG01bTVaQUorQWxIMk9BbjRhZDUrMW5oSk4vOThQQnBQMXM3MjBvPSJ9fSwic2lnbmVkSWRlbnRpdHlLZXkiOnsicHJpdmF0ZSI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6IitFRWhQbklPaEd0dURCN3pSNExQQk1idHllTVB1M2RjWUhQaFlCZCsya1E9In0sInB1YmxpYyI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6IkNqZ21aZEVtTGd5Z1BRaHIrdDRhd1Y4bU5vdGZBTFlFbVJFc1ZsOEFVVjQ9In19LCJzaWduZWRQcmVLZXkiOnsia2V5UGFpciI6eyJwcml2YXRlIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiTVB3bUtsRm04eVFma3pHV0xWcU5ONWZtZVg1cXhKQTJZZ3YrbHFUNmUyYz0ifSwicHVibGljIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiSEVkNFdyQ2cxYlFkRElrVTRPUHY4TUU2MmZoem8xaW5XMlFmeXEveVFITT0ifX0sInNpZ25hdHVyZSI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6Ilcralo1eG4ydG5KUDE5MTIxZGZyR3FlYmxPS1IzUXR4MGd2NHhsSHExZ0tNc1NwS3o0UElPMXA1VXo5RkNtQzIvQS85Z2dMZnNpb093ZlU2NVpZNUFnPT0ifSwia2V5SWQiOjF9LCJyZWdpc3RyYXRpb25JZCI6MjUyLCJhZHZTZWNyZXRLZXkiOiJBM0ZlYktWOWhJSG1IT0tnWWZsWGNIa3Q2dUF3di9vSlpYSFBkWjFTR3FzPSIsInByb2Nlc3NlZEhpc3RvcnlNZXNzYWdlcyI6W3sia2V5Ijp7InJlbW90ZUppZCI6IjI1NDcyNDgzMTMzNUBzLndoYXRzYXBwLm5ldCIsImZyb21NZSI6dHJ1ZSwiaWQiOiIwOUE5RUFEMjQxQUFDMjQzRjJFQzRDOUZBMzE5RkMyQyJ9LCJtZXNzYWdlVGltZXN0YW1wIjoxNzMyNTczMjg5fSx7ImtleSI6eyJyZW1vdGVKaWQiOiIyNTQ3MjQ4MzEzMzVAcy53aGF0c2FwcC5uZXQiLCJmcm9tTWUiOnRydWUsImlkIjoiRUFFQUJBNzA1MTY3MUIxMUFFNzNGMTFCNTY0ODA4NEIifSwibWVzc2FnZVRpbWVzdGFtcCI6MTczMjU3MzMwMn1dLCJuZXh0UHJlS2V5SWQiOjMxLCJmaXJzdFVudXBsb2FkZWRQcmVLZXlJZCI6MzEsImFjY291bnRTeW5jQ291bnRlciI6MSwiYWNjb3VudFNldHRpbmdzIjp7InVuYXJjaGl2ZUNoYXRzIjpmYWxzZX0sImRldmljZUlkIjoiWlM5ekN4MWFUR1NVc2k5WTQ5bVg2ZyIsInBob25lSWQiOiJmMjc3NDllOS1lOGRkLTRkZDMtYTVmZi1mOWNkYmY2OTNlMzciLCJpZGVudGl0eUlkIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoid2E3T3FZNGRVUHlJa1hZbHJ6T0F0aUxuTVFZPSJ9LCJyZWdpc3RlcmVkIjp0cnVlLCJiYWNrdXBUb2tlbiI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6ImVzYVZObnVlRTNoZGZTbmltRjlFRDlTU1VHaz0ifSwicmVnaXN0cmF0aW9uIjp7fSwicGFpcmluZ0NvZGUiOiIxUlMyN1oxVCIsIm1lIjp7ImlkIjoiMjU0NzI0ODMxMzM1OjQzQHMud2hhdHNhcHAubmV0IiwibmFtZSI6Ik1hZGluYSDwn5OMIn0sImFjY291bnQiOnsiZGV0YWlscyI6IkNPbmY0NW9HRU0zd2s3b0dHQUlnQUNnQSIsImFjY291bnRTaWduYXR1cmVLZXkiOiIvaE0zelE5Zkdma210U0hwc00wNXArb1grWTcrTUYwNCt5WU1yQURIc1NzPSIsImFjY291bnRTaWduYXR1cmUiOiJXZ24vM0g0NHE1VmtrS2EvSXQ5SDg5TGJsQ0diRnkzUlFleTZMSnZGOVlIaDYwdXdjY2lMUnBtYmR4Z1VwYTJwS09aK2V5elNPMXpYYXU1aFg4elhBdz09IiwiZGV2aWNlU2lnbmF0dXJlIjoieVJ6QmErMWdRNnZXYmN5VGo1eU9oaGx1TEtwbVNuWCtSMXF0dDNsTUhTM214aDRmWkZWY1VqKzg4MDVmci9hbVgyQlNWeURlZXlLNTY0clZwWG43Q0E9PSJ9LCJzaWduYWxJZGVudGl0aWVzIjpbeyJpZGVudGlmaWVyIjp7Im5hbWUiOiIyNTQ3MjQ4MzEzMzU6NDNAcy53aGF0c2FwcC5uZXQiLCJkZXZpY2VJZCI6MH0sImlkZW50aWZpZXJLZXkiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJCZjRUTjgwUFh4bjVKclVoNmJETk9hZnFGL21PL2pCZE9Qc21ES3dBeDdFciJ9fV0sInBsYXRmb3JtIjoiYW5kcm9pZCIsImxhc3RBY2NvdW50U3luY1RpbWVzdGFtcCI6MTczMjU3MzI3NiwibXlBcHBTdGF0ZUtleUlkIjoiQUFBQUFGYTUifQ=='auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      # Set up kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
