# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      Session id:eyJub2lzZUtleSI6eyJwcml2YXRlIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiNEt0ajJFbjEyb2I0ajZVWWVTTDI0Qi9jRlh3Qko5dURXMWx3elMzZ0EwWT0ifSwicHVibGljIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiK0dmb1Y2SDUxd1c2LzEzdzlxUEZqWUdZNGhDbEVlWDl3ekR2TjNIZlZTTT0ifX0sInBhaXJpbmdFcGhlbWVyYWxLZXlQYWlyIjp7InByaXZhdGUiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJHRW5XN041RVkwYytUM1FDNWtVWjhreFBDalJSMGROMnJlUHVaZHVkYVZRPSJ9LCJwdWJsaWMiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJEbnZuVG01bTVaQUorQWxIMk9BbjRhZDUrMW5oSk4vOThQQnBQMXM3MjBvPSJ9fSwic2lnbmVkSWRlbnRpdHlLZXkiOnsicHJpdmF0ZSI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6IitFRWhQbklPaEd0dURCN3pSNExQQk1idHllTVB1M2RjWUhQaFlCZCsya1E9In0sInB1YmxpYyI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6IkNqZ21aZEVtTGd5Z1BRaHIrdDRhd1Y4bU5vdGZBTFlFbVJFc1ZsOEFVVjQ9In19LCJzaWduZWRQcmVLZXkiOnsia2V5UGFpciI6eyJwcml2YXRlIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiTVB3bUtsRm04eVFma3pHV0xWcU5ONWZtZVg1cXhKQTJZZ3YrbHFUNmUyYz0ifSwicHVibGljIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoiSEVkNFdyQ2cxYlFkRElrVTRPUHY4TUU2MmZoem8xaW5XMlFmeXEveVFITT0ifX0sInNpZ25hdHVyZSI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6Ilcralo1eG4ydG5KUDE5MTIxZGZyR3FlYmxPS1IzUXR4MGd2NHhsSHExZ0tNc1NwS3o0UElPMXA1VXo5RkNtQzIvQS85Z2dMZnNpb093ZlU2NVpZNUFnPT0ifSwia2V5SWQiOjF9LCJyZWdpc3RyYXRpb25JZCI6MjUyLCJhZHZTZWNyZXRLZXkiOiJBM0ZlYktWOWhJSG1IT0tnWWZsWGNIa3Q2dUF3di9vSlpYSFBkWjFTR3FzPSIsInByb2Nlc3NlZEhpc3RvcnlNZXNzYWdlcyI6W3sia2V5Ijp7InJlbW90ZUppZCI6IjI1NDcyNDgzMTMzNUBzLndoYXRzYXBwLm5ldCIsImZyb21NZSI6dHJ1ZSwiaWQiOiIwOUE5RUFEMjQxQUFDMjQzRjJFQzRDOUZBMzE5RkMyQyJ9LCJtZXNzYWdlVGltZXN0YW1wIjoxNzMyNTczMjg5fSx7ImtleSI6eyJyZW1vdGVKaWQiOiIyNTQ3MjQ4MzEzMzVAcy53aGF0c2FwcC5uZXQiLCJmcm9tTWUiOnRydWUsImlkIjoiRUFFQUJBNzA1MTY3MUIxMUFFNzNGMTFCNTY0ODA4NEIifSwibWVzc2FnZVRpbWVzdGFtcCI6MTczMjU3MzMwMn1dLCJuZXh0UHJlS2V5SWQiOjMxLCJmaXJzdFVudXBsb2FkZWRQcmVLZXlJZCI6MzEsImFjY291bnRTeW5jQ291bnRlciI6MSwiYWNjb3VudFNldHRpbmdzIjp7InVuYXJjaGl2ZUNoYXRzIjpmYWxzZX0sImRldmljZUlkIjoiWlM5ekN4MWFUR1NVc2k5WTQ5bVg2ZyIsInBob25lSWQiOiJmMjc3NDllOS1lOGRkLTRkZDMtYTVmZi1mOWNkYmY2OTNlMzciLCJpZGVudGl0eUlkIjp7InR5cGUiOiJCdWZmZXIiLCJkYXRhIjoid2E3T3FZNGRVUHlJa1hZbHJ6T0F0aUxuTVFZPSJ9LCJyZWdpc3RlcmVkIjp0cnVlLCJiYWNrdXBUb2tlbiI6eyJ0eXBlIjoiQnVmZmVyIiwiZGF0YSI6ImVzYVZObnVlRTNoZGZTbmltRjlFRDlTU1VHaz0ifSwicmVnaXN0cmF0aW9uIjp7fSwicGFpcmluZ0NvZGUiOiIxUlMyN1oxVCIsIm1lIjp7ImlkIjoiMjU0NzI0ODMxMzM1OjQzQHMud2hhdHNhcHAubmV0IiwibmFtZSI6Ik1hZGluYSDwn5OMIn0sImFjY291bnQiOnsiZGV0YWlscyI6IkNPbmY0NW9HRU0zd2s3b0dHQUlnQUNnQSIsImFjY291bnRTaWduYXR1cmVLZXkiOiIvaE0zelE5Zkdma210U0hwc00wNXArb1grWTcrTUYwNCt5WU1yQURIc1NzPSIsImFjY291bnRTaWduYXR1cmUiOiJXZ24vM0g0NHE1VmtrS2EvSXQ5SDg5TGJsQ0diRnkzUlFleTZMSnZGOVlIaDYwdXdjY2lMUnBtYmR4Z1VwYTJwS09aK2V5elNPMXpYYXU1aFg4elhBdz09IiwiZGV2aWNlU2lnbmF0dXJlIjoieVJ6QmErMWdRNnZXYmN5VGo1eU9oaGx1TEtwbVNuWCtSMXF0dDNsTUhTM214aDRmWkZWY1VqKzg4MDVmci9hbVgyQlNWeURlZXlLNTY0clZwWG43Q0E9PSJ9LCJzaWduYWxJZGVudGl0aWVzIjpbeyJpZGVudGlmaWVyIjp7Im5hbWUiOiIyNTQ3MjQ4MzEzMzU6NDNAcy53aGF0c2FwcC5uZXQiLCJkZXZpY2VJZCI6MH0sImlkZW50aWZpZXJLZXkiOnsidHlwZSI6IkJ1ZmZlciIsImRhdGEiOiJCZjRUTjgwUFh4bjVKclVoNmJETk9hZnFGL21PL2pCZE9Qc21ES3dBeDdFciJ9fV0sInBsYXRmb3JtIjoiYW5kcm9pZCIsImxhc3RBY2NvdW50U3luY1RpbWVzdGFtcCI6MTczMjU3MzI3NiwibXlBcHBTdGF0ZUtleUlkIjoiQUFBQUFGYTUifQ==
